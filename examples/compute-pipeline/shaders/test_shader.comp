#version 450

#define WORKGROUP_SIZE 16
layout ( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) * 43758.5453123)
#define hash3(p) fract(sin((p)*mat3(127.1,311.7, 74.7,  269.5,183.3,246.1,  113.5,271.9,124.6))*43758.5453123)

layout( binding = 0, rgba8 ) uniform image2D outImage;

layout( push_constant ) uniform PushConstants
{
    float time;
} constants;

mat3 rotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
    vec3(1, 0, 0),
    vec3(0, c, -s),
    vec3(0, s, c)
    );
}

mat3 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
    vec3(c, 0, s),
    vec3(0, 1, 0),
    vec3(-s, 0, c)
    );
}

mat3 rotateZ(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
    vec3(c, -s, 0),
    vec3(s, c, 0),
    vec3(0, 0, 1)
    );
}

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

vec4 calculate_color( float x )
{
    float cycle_duration = 10.0f;  // Time in seconds for a full cycle
    float light_distance = 10.0f;   // How far the ray may go
    float wavelength = 0.1f;   // Start to end length of a ray segment

    float ray_start = fract( constants.time / cycle_duration ) * light_distance;
    float ray_end = ray_start + wavelength;

    if( x >= ray_start && x <= ray_end )
    {
        float t = ( x - ray_start ) / wavelength;
        return vec4( palette( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) ) * 1.f, 1.0f );
    }

    return vec4( 0.0f );
}

void write_pixel( ivec2 pos, vec4 color )
{
    //imageStore( outImage, pos, imageLoad( outImage, pos ) + color );
    imageStore( outImage, pos, color );
}

// Draw a line from p0 to p1
void drawLine( ivec2 start, ivec2 end, float t0, float t1 )
{
    ivec2 delta = end - start;
    ivec2 absDelta = abs( delta );
    ivec2 sign = sign( delta );

    if( absDelta.x > absDelta.y )
    {
        int d = 2 * absDelta.y - absDelta.x;
        int incrE = 2 * absDelta.y;
        int incrNE = 2 * ( absDelta.y - absDelta.x );

        ivec2 p = start;
        if( p.x < 0 || p.y < 0 || p.x >= imageSize( outImage ).x || p.y >= imageSize( outImage ).y ) return;
        write_pixel( p, calculate_color( t0 ) );

        while( p.x != end.x )
        {

            if( d <= 0 )
            {
                d += incrE;
                p.x += sign.x;
            }
            else
            {
                d += incrNE;
                p.x += sign.x;
                p.y += sign.y;
            }

            // Map our pixel on to [p0, p1]
            float t = float( abs( p.x - start.x ) ) / float( absDelta.x ) * ( t1 - t0 ) + t0;
            if( p.x < 0 || p.y < 0 || p.x >= imageSize( outImage ).x || p.y >= imageSize( outImage ).y ) break;
            vec4 color = calculate_color( t );
            if( color.a > 0.0f ) write_pixel( p, color );
        }
    }
    else
    {
        int d = 2 * absDelta.x - absDelta.y;
        int incrE = 2 * absDelta.x;
        int incrNE = 2 * ( absDelta.x - absDelta.y );

        ivec2 p = start;
        if( p.x < 0 || p.y < 0 || p.x >= imageSize( outImage ).x || p.y >= imageSize( outImage ).y ) return;
        write_pixel( p, calculate_color( t0 ) );

        while( p.y != end.y )
        {
            if( d <= 0 )
            {
                d += incrE;
                p.y += sign.y;
            }
            else
            {
                d += incrNE;
                p.x += sign.x;
                p.y += sign.y;
            }

            // Map our pixel on to [p0, p1]
            float t = float( abs( p.y - start.y ) ) / float( absDelta.y ) * ( t1 - t0 ) + t0;
            if( p.x < 0 || p.y < 0 || p.x >= imageSize( outImage ).x || p.y >= imageSize( outImage ).y ) break;
            vec4 color = calculate_color( t );
            if( color.a > 0.0f ) write_pixel( p, color );
        }
    }
}

mat4 projection_matrix()
{
    mat4 m = mat4(1.0);
    float near = 0.1;
    float far = 100.0;
    float angleOfView = 90.0;
    float scale = 1 / tan(angleOfView * 0.5 * 3.1415 / 180);
    m[0][0] = scale;  // scale the x coordinates of the projected point
    m[1][1] = scale;  // scale the y coordinates of the projected point
    m[2][2] = -far / (far - near);  // used to remap z to [0,1]
    m[3][2] = -far * near / (far - near);  // used to remap z [0,1]
    m[2][3] = -1;  // set w = -z
    m[3][3] = 0;
    return m;
}

ivec2 transform_scene( vec3 pos )
{
    vec3 p = pos;
    p = rotateY( 1.8f + constants.time * .08f ) * p;
    p = ( projection_matrix() * vec4( p, 1 ) ).xyz;

    // Scale
    p *= 200.0f;

    // Center the compute data
    ivec2 screenSize = imageSize( outImage );
    ivec2 offset = screenSize / 2;

    ivec2 result = ivec2( p.xy ) + offset;

    return result;
}

float sdPlane( vec3 p, vec3 n, float h )
{
    // n must be normalized
    return dot(p,n) + h;
}

float sdSphere( vec3 p, float s )
{
    return length(p) - s;
}

float sdContainer( vec3 p, float s )
{
    float l = 0.f;
    return min(
        sdPlane( p - vec3( 0, 0, s ), vec3( 0, 0, -1 ), l ),
        min(
            sdPlane( p - vec3( 0, 0, -s ), vec3( 0, 0, 1 ), l ),
            min(
                sdPlane( p - vec3( 0, -s, 0 ), vec3( 0, 1, 0 ), l ),
                min(
                    sdPlane( p - vec3( 0, s, 0 ), vec3( 0, -1, 0 ), l ),
                    min(
                        sdPlane( p - vec3( -s, 0, 0 ), vec3( 1, 0, 0 ), l ),
                        sdPlane( p - vec3( s, 0, 0 ), vec3( -1, 0, 0 ), l )
                    )
                )
            )
        )
    );
}

float sdf( vec3 p )
{
    return
    min(
        200,//sdContainer( p, 2.0f ),
        min(
            sdSphere( p + vec3( 0, 0, -0 ), 1.0f ),
            sdSphere( p + vec3( 0, 1.f, -0 ), 1.2f )
        )
    );
}

vec3 sdf_normal( vec3 p )
{
    const float h = 0.0001; // replace by an appropriate value
    const vec2 k = vec2(1,-1);
    return normalize( k.xyy*sdf( p + k.xyy*h ) +
        k.yyx*sdf( p + k.yyx*h ) +
        k.yxy*sdf( p + k.yxy*h ) +
        k.xxx*sdf( p + k.xxx*h ) );
}

void pulse( vec3 pos, vec3 inDir )
{
    // Making sure our direction is normalized
    vec3 dir = normalize( inDir );

    // The distance we will move along the ray
    float t = 0.0f;
    float rt = 0.0f;
    vec3 r = pos;
    vec3 p = r;
    bool double_bounce_warning = false;
    for( int i = 0; i < 100; i++ )
    {
        float d = sdf( p );

        // Move our transition point (t, p)
        t += d;
        rt += d;
        p = r + rt * dir;

        if( t > 100.0f )
        {
            drawLine(
                transform_scene( r ),
                transform_scene( r + rt * dir ),
                t - rt,
                t
            );
            break;
        }

        // Invalid
        if( d < 0.0f )
        {
            break;
        }

        // Intersect
        if( d < .01f )
        {
            // We hit something

            // Draw the ray
            drawLine(
                transform_scene( r ),
                transform_scene( r + rt * dir ),
                t - rt,
                t
            );

            // Move the ray in space to pass by the reflected ray along t
            dir = reflect( dir, -sdf_normal( p ) );
            r = p;
            t += .01f;
            rt += .01f;
            p = r + t * dir;

            rt = 0.0f;
        }
    }
}

void main()
{
    ivec2 screenSize = imageSize( outImage );

    vec3 pos = vec3( vec2(gl_GlobalInvocationID.xy) / vec2( gl_NumWorkGroups * WORKGROUP_SIZE ) - .5f, 0 );
    pos -= vec3( 0, 0, 1.1f );

    //pos += vec3( hash2( gl_GlobalInvocationID.xy ) * .1f, .0f );

    // Transform
    vec3 p1 = pos;
    float expand = 0.2f;
    float len = .3f;
    vec3 p2 = pos + vec3( pos.x * expand, pos.y * expand, len );

    pulse( p1, normalize( p2 - p1 ) );
}